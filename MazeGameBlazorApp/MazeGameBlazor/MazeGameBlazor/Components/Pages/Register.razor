@page "/register"
@using MazeGameBlazor.Services
@inject NavigationManager NavManager
@inject AuthService AuthService

<div class="auth-container">
    <h3 class="form-title">Create an Account</h3>

    <!-- Registration Form -->
    <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration" FormName="registerForm" id="registerForm">
        <DataAnnotationsValidator />
        <ValidationSummary class="validation-summary" />

        <div class="input-group">
            <label>Username:</label>
            <InputText @bind-Value="registerModel.UserName" class="input-field" />
        </div>

        <div class="input-group">
            <label>Email:</label>
            <InputText @bind-Value="registerModel.Email" class="input-field" />
        </div>

        <div class="input-group">
            <label>Password:</label>
            <InputText @bind-Value="registerModel.Password" InputType="password" class="input-field" />
        </div>

        <div class="input-group">
            <label>Confirm Password:</label>
            <InputText @bind-Value="registerModel.ConfirmPassword" InputType="password" class="input-field" />
        </div>

        <button type="submit" class="register-button"><i class="fas fa-user-plus"></i> Register</button>
    </EditForm>

    <!-- Registration Message -->
    @if (!string.IsNullOrEmpty(message))
    {
        <p class="status-message">@message</p>

        @if (registrationSuccessful)
        {
            <p>
                <a href="/login" class="login-link"><i class="fas fa-sign-in-alt"></i> Click here to login</a>
            </p>
        }
    }

    <!-- Redirect to Login -->
    <div class="form-footer">
        <p>Already have an account?</p>
        <NavLink href="/login" class="login-link">
            <i class="fas fa-sign-in-alt"></i> Login
        </NavLink>
    </div>
</div>

@code {
    /// <summary>
    /// Model for user registration.
    /// </summary>
    [SupplyParameterFromForm]
    private RegisterModel registerModel { get; set; } = new();

    private string? message;
    private bool registrationSuccessful = false;

    /// <summary>
    /// Handles user registration.
    /// </summary>
    private async Task HandleRegistration()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            registrationSuccessful = false;
            message = "Passwords do not match.";
            return;
        }

        try
        {
            var result = await AuthService.RegisterUserAsync(registerModel);
            if (result.Succeeded)
            {
                registrationSuccessful = true;
                message = "Registration successful! Use the link below to log in.";
            }
            else
            {
                registrationSuccessful = false;
                message = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            registrationSuccessful = false;
            message = $"Error: {ex.Message}";
        }
    }

    /// <summary>
    /// Represents a new user's registration details.
    /// </summary>
    public class RegisterModel
    {
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
