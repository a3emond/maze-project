@page "/play"
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using MazeGameBlazor.GameEngine
@using MazeGameBlazor.GameEngine.Algorithms

<PageTitle>Play the Maze Game</PageTitle>

<div class="game-container">
    <!-- Game Header -->
    <header class="game-header">
        <h1>Maze Game</h1>
        <p>Find the exit and avoid traps! Use the WASD keys to move.</p>
        <p>Press Start Button to spawn your character</p>
    </header>

    <!-- Game Screen -->
    <div class="game-screen" tabindex="0" @onfocus="SetFocus">
        <canvas id="mazeCanvas"></canvas>
        <canvas id="minimapCanvas"></canvas>
        <div class="game-overlay" id="gameOverlay">
            <p id="gameStatus">Ready?</p>
        </div>
    </div>

    <!-- Player HUD -->
    <div class="game-hud">
        <div class="hud-section">
            <span>Health:</span>
            <div class="heart-container">
                @for (int i = 0; i < maxHearts; i++)
                {
                    <img src="@GetHeartImage(i)" class="heart-icon" />
                }
            </div>
        </div>

        <div class="hud-section">
            <span>Inventory:</span>
            <div class="inventory">
                @for (int i = 0; i < inventorySlots.Length; i++)
                {
                    <div class="inventory-slot">
                        @if (!string.IsNullOrEmpty(inventorySlots[i]))
                        {
                            <img width="44px" src="@inventorySlots[i]" />
                        }
                    </div>
                }
            </div>
        </div>

        <div class="hud-section">
            <span>Time: @timer</span>
            <span>Status: @statusEffect</span>
        </div>
    </div>

    <!-- Controls -->
    <div class="game-controls">
        <button class="control-button" @onclick="StartGame"><i class="fas fa-play"></i> Start</button>
        <button class="control-button" @onclick="RestartGame"><i class="fas fa-redo"></i> Restart</button>
    </div>
</div>


@code {
    private int maxHearts = 5;
    private int currentHearts = 3;
    private string[] inventorySlots = new string[6] { "/assets/hud/inventory/compass.png", "/assets/hud/inventory/key.png", null, null, null, null };
    private TimeSpan timer = TimeSpan.Zero;
    private string statusEffect = "Normal";
    private MazeGenerator mazeGenerator = new();
    private Maze maze;
    private Player player;
    private bool gameStarted = false;
    private bool gameRunning = false;
    private HashSet<string> movementKeys = new();
    private DotNetObjectReference<Game> dotNetRef;
    private MazeAlgorithmEnum selectedAlgorithm = MazeAlgorithmEnum.RecursiveBacktracking; // Default Algorithm

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GenerateAndRenderMaze();
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerKeyListeners", dotNetRef);
        }
    }

    private async void GenerateAndRenderMaze()
    {
        // Generate maze using MazeGenerator
        maze = mazeGenerator.GenerateMaze(selectedAlgorithm);

        int widthPixels = maze.Width;
        int heightPixels = maze.Height;

        string[,] spriteGrid = new string[widthPixels, heightPixels];

        for (int y = 0; y < heightPixels; y++)
        {
            for (int x = 0; x < widthPixels; x++)
            {
                spriteGrid[y, x] = TileProcessor.GetTileSprite(maze, x, y);
            }
        }

        string[] flattenedSprites = spriteGrid.Cast<string>().ToArray();
        await JS.InvokeVoidAsync("initCanvas2D", flattenedSprites, widthPixels, heightPixels);
    }

    [JSInvokable]
    public async Task HandleKeyPress(string key)
    {
        if (!gameStarted || player == null) return;

        string direction = key switch
        {
            "w" => "up",
            "s" => "down",
            "a" => "left",
            "d" => "right",
            _ => null
        };

        if (direction != null)
        {
            movementKeys.Add(direction);
            await StartGameLoop();
        }
    }

    [JSInvokable]
    public void HandleKeyRelease(string key)
    {
        string direction = key switch
        {
            "w" => "up",
            "s" => "down",
            "a" => "left",
            "d" => "right",
            _ => null
        };

        if (direction != null)
        {
            movementKeys.Remove(direction);
        }
    }

    private async Task StartGameLoop()
    {
        if (gameRunning) return;
        gameRunning = true;

        while (gameRunning && movementKeys.Count > 0)
        {
            string direction = movementKeys.Last();
            player.Move(direction, maze.WalkableTiles);
            await UpdatePlayerPosition();

            await Task.Delay(30); // Adjust for smoother movement
        }

        gameRunning = false;
    }

    private async Task UpdatePlayerPosition()
    {
        await JS.InvokeVoidAsync("updatePlayerPosition", player.X, player.Y, player.GetCurrentSprite());
    }

    private async Task SetFocus()
    {
        await JS.InvokeVoidAsync("focusGameScreen");
    }

    private async Task StartGame()
    {
        gameStarted = true;
        var startPosition = MazeUtils.FindStartPosition(maze);
        player = new Player(startPosition.Item1, startPosition.Item2);

        await JS.InvokeVoidAsync("clearOverlay"); // Hide "Ready?" overlay
        await JS.InvokeVoidAsync("spawnPlayer", player.X, player.Y, player.GetCurrentSprite());
        await JS.InvokeVoidAsync("updatePlayerOnMinimap", player.X, player.Y); // Update minimap immediately
    }

    private async Task RestartGame()
    {
        GenerateAndRenderMaze();
        gameStarted = false;
        // reload the page to reset the game
        NavigationManager.NavigateTo("/play", true);
        //await JS.InvokeVoidAsync("resetGame");
    }

    private string GetHeartImage(int index) => index < currentHearts ? "/assets/hud/health/heart_100.png" : "/assets/hud/health/heart_0.png";

    public async ValueTask DisposeAsync()
    {
        if (dotNetRef != null)
        {
            dotNetRef.Dispose();
        }
    }
}
