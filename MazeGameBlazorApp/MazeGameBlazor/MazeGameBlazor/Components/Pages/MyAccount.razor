@page "/my-account"
@using MazeGameBlazor.Database
@using MazeGameBlazor.Database.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavManager

<h3>My Account</h3>

@if (_user == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@UserProfile" OnValidSubmit="UpdateProfile" FormName="UpdateProfileForm">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="input-group">
            <label>Username:</label>
            <InputText @bind-Value="UserProfile.UserName" class="input-field"/>
        </div>

        <div class="input-group">
            <label>Email:</label>
            <InputText @bind-Value="UserProfile.Email" class="input-field"/>
        </div>

        <div class="input-group">
            <label>New Password (leave blank to keep current):</label>
            <InputText @bind-Value="UserProfile.NewPassword" InputType="password" class="input-field"/>
        </div>

        <button type="submit" class="update-button">Update Profile</button>
    </EditForm>

    <button @onclick="Logout" class="logout-button">Logout</button>

    @if (!string.IsNullOrEmpty(_message))
    {
        <p class="status-message">@_message</p>
    }
}

@code {
    private User? _user;
    [SupplyParameterFromForm] private UserProfileModel? UserProfile { get; } = new();
    private string? _message = "";
    private AppDbContext? _context;

    /// <summary>
    ///     Lifecycle method: Runs when the component initializes.
    ///     Loads the authenticated user's profile.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Identity is { IsAuthenticated: true })
        {
            _user = await UserManager.FindByNameAsync(currentUser.Identity.Name);
            if (_user != null)
            {
                UserProfile.UserName = _user.UserName;
                UserProfile.Email = _user.Email;
            }
        }
        else
        {
            NavManager.NavigateTo("/login");
        }
    }

    /// <summary>
    ///     Updates the user's profile (username and email).
    /// </summary>
    private async Task UpdateProfile()
    {
        if (_user == null) return;

        Console.WriteLine($"Before update -> Username: {_user.UserName}, Email: {_user.Email}");

        var isUsernameChanged = _user.UserName != UserProfile.UserName;
        var isEmailChanged = _user.Email != UserProfile.Email;

        if (isUsernameChanged || isEmailChanged)
        {
            try
            {
                var userId = _user.Id;
                var normalizedUserName = UserProfile.UserName.ToUpper();
                var normalizedEmail = UserProfile.Email.ToUpper();

                // Use raw SQL to update the user
                var sql = @"
                UPDATE AspNetUsers 
                SET UserName = @p0, NormalizedUserName = @p1, 
                    Email = @p2, NormalizedEmail = @p3, 
                    ConcurrencyStamp = @p4
                WHERE Id = @p5";

                await _context.Database.ExecuteSqlRawAsync(
                    sql,
                    UserProfile.UserName, normalizedUserName,
                    UserProfile.Email, normalizedEmail,
                    Guid.NewGuid().ToString(), userId
                );

                Console.WriteLine($"After update -> Username: {UserProfile.UserName}, Email: {UserProfile.Email}");

                // Force user reload (Important!)
                _user = await UserManager.FindByIdAsync(userId);

                // Refresh authentication session
                await SignInManager.RefreshSignInAsync(_user);

                _message = "Profile updated successfully!";
            }
            catch (Exception ex)
            {
                _message = "Error updating profile.";
                Console.WriteLine($"SQL Update Failed: {ex.Message}");
            }
        }
    }

    /// <summary>
    ///     Logs out the user and redirects to the logout page.
    /// </summary>
    private void Logout()
    {
        NavManager.NavigateTo("/logout", true);
    }

    /// <summary>
    ///     Represents a user's profile details for editing.
    /// </summary>
    public class UserProfileModel
    {
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string? NewPassword { get; set; }
    }

}