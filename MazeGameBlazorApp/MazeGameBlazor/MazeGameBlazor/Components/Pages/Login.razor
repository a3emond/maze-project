@page "/login"
@using MazeGameBlazor.Services
@inject NavigationManager NavManager
@inject AuthService AuthService

<div class="login-container">
    <div class="login-card">
        <h3>Login</h3>

        <!-- Login Form -->
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="loginForm" id="loginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="input-group">
                <label>Email:</label>
                <InputText @bind-Value="loginModel.Email" class="input-field" />
            </div>

            <div class="input-group">
                <label>Password:</label>
                <InputText @bind-Value="loginModel.Password" InputType="password" class="input-field" />
            </div>

            <button type="submit" class="login-button">
                <i class="fas fa-sign-in-alt"></i> Login
            </button>
        </EditForm>

        <!-- Registration Section -->
        <div class="register-section" id="register-button">
            <p>Don't have an account yet?</p>
            <NavLink href="/register" class="register-button">
                <i class="fas fa-user-plus"></i> Register
            </NavLink>
        </div>

        <!-- Login Message -->
        @if (!string.IsNullOrEmpty(message))
        {
            <p class="login-message">@message</p>

            @if (loginSuccessful)
            {
                <p>
                    <a href="/">Click here to go to the home page</a>
                </p>
                <script>
                    document.getElementById("loginForm").style.display = "none";
                    document.getElementById("register-button").style.display = "none";
                </script>
            }
        }
    </div>
</div>

@code {
    /// <summary>
    /// Model for login credentials.
    /// </summary>
    [SupplyParameterFromForm]
    private LoginModel? loginModel { get; set; }

    /// <summary>
    /// Lifecycle method: Ensures the login model is initialized.
    /// </summary>
    protected override void OnInitialized() => loginModel ??= new();

    private string? message;
    private bool loginSuccessful = false;

    /// <summary>
    /// Handles user login authentication.
    /// </summary>
    private async Task HandleLogin()
    {
        try
        {
            var result = await AuthService.LoginUserAsync(loginModel);
            if (result.Succeeded)
            {
                loginSuccessful = true;
                message = "Login successful! Use the link below to go to the home page.";
            }
            else
            {
                loginSuccessful = false;
                message = "Invalid Email or Password.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex.Message}");
            loginSuccessful = false;
            message = $"Error: {ex.Message}";
        }
    }

    /// <summary>
    /// Represents a user's login credentials.
    /// </summary>
    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
