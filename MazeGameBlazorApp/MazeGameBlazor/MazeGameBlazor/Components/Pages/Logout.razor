@page "/logout"
@using MazeGameBlazor.Components.Layout
@using MazeGameBlazor.Services
@layout MinimalLayout
@inject AuthenticationStateProvider AuthStateProvider
@inject AuthService AuthService   
@inject NavigationManager NavManager

<h1>@_logoutMessage</h1>

@if (_isLogoutComplete)
{
    <!-- Anchor to return to main page -->
    <a href="/" class="btn btn-primary">Return to Home</a>
}

@code {
    private bool _isLogoutComplete;
    private string _logoutMessage = "Logging out...";

    /// <summary>
    ///     Lifecycle method: Runs when the component initializes.
    ///     Calls the logout function.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await PerformLogoutAsync();
    }

    /// <summary>
    ///     Logs out the user and updates the UI accordingly.
    /// </summary>
    private async Task PerformLogoutAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            try
            {
                // Perform the logout operation
                await AuthService.LogoutAsync();

                // Update the message once logout is complete
                _logoutMessage = "You have been logged out. Thank you!";
            }
            catch (Exception e)
            {
                // Handle logout errors and update the message
                _logoutMessage = "An error occurred during logout. Please try again.";
                Console.WriteLine($"Logout error: {e.Message}");
            }
        }
        else
        {
            // If the user is not authenticated, skip logout
            _logoutMessage = "You are not logged in.";
        }

        // Mark logout as complete to show the anchor
        _isLogoutComplete = true;
        StateHasChanged(); // Force re-render to update the UI
    }

}