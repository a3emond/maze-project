@using MazeGameBlazor.Database.Models
@inject BlogService BlogService
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Content { get; set; } = "";
    [Parameter] public string Author { get; set; } = "";
    [Parameter] public DateTime CreatedAt { get; set; }
    [Parameter] public int LikeCount { get; set; }
    [Parameter] public MediaType MediaType { get; set; }
    [Parameter] public string MediaUrl { get; set; } = "";
    [Parameter] public string ThumbnailUrl { get; set; } = "";

    private bool IsLiked = false;
    private List<Comment> Comments = new();
    private string NewComment = "";
    private string CommentAuthor = ""; 

    
    protected override async Task OnInitializedAsync()
    {
        await LoadComments();
    }
    
    // get author name from authentication state
    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            CommentAuthor = user.Identity.Name;
        }
        else
        {
            CommentAuthor = "Guest"; 
        }
    }

    private async Task LoadComments()
    {
        Comments = await BlogService.GetCommentsAsync(Id);
    }

    private async Task SubmitComment()
    {
        if (!string.IsNullOrWhiteSpace(NewComment))
        {
            await BlogService.AddCommentAsync(Id, CommentAuthor, NewComment);
            NewComment = ""; // Clear input after submission
            await LoadComments(); // Refresh comments
        }
    }

    private async Task LikePost()
    {
        if (!IsLiked)
        {
            IsLiked = true;
            LikeCount = await BlogService.LikePostAsync(Id);
        }
    }
}

<div class="blog-card">
    @switch (MediaType)
    {
        case MediaType.Image:
            <img src="@MediaUrl" alt="@Title" class="blog-media" />
            break;
        case MediaType.Video:
            <video controls class="blog-media">
                <source src="@($"api/media/stream/{Path.GetFileName(MediaUrl)}")" type="video/mp4" />
                Your browser does not support the video tag.
            </video>
            break;
        case MediaType.Audio:
            <audio controls class="blog-media">
                <source src="@MediaUrl" type="audio/mpeg" />
                Your browser does not support the audio tag.
            </audio>
            break;
        case MediaType.Document:
            <a href="@MediaUrl" class="blog-media document-link" target="_blank">View Document</a>
            break;
        default:
            <p class="blog-media">Unsupported media type.</p>
            break;
    }
    <div class="blog-content">
        <h3>@Title</h3>
        <p class="blog-meta">By @Author | @CreatedAt.ToString("MMMM dd, yyyy")</p>
        <p>@Content</p>

        <!-- Like Button -->
        <button @onclick="LikePost" class="like-button">
            ❤️ <strong>@LikeCount</strong>
        </button>

        <!--<a href="/blog/@Id">Read More</a>--> <!-- TODO: endpoint for full documentation -->
    </div>

    <!-- Comment Section -->
    <div class="comment-section">
        <h4>Comments</h4>

        <div class="comments">
            @foreach (var comment in Comments)
            {
                <div class="comment">
                    <strong>@comment.Author</strong>: @comment.Content
                </div>
            }
        </div>

        <div class="add-comment">
            <input type="text" @bind="NewComment" placeholder="Write a comment..." />
            <button @onclick="SubmitComment" class="comment-button">Comment</button>
        </div>
    </div>
</div>


