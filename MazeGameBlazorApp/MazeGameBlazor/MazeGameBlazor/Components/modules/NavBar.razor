@using System.Security.Claims
@using MazeGameBlazor.Services
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject AuthService AuthService
@inject IJSRuntime Js

<header class="navbar">
    <!-- Logo -->
    <a href="/" class="navbar-logo">
        <img src="logo.webp" alt="Maze Game Logo" class="logo-img"/>
    </a>

    <!-- Hamburger Menu Button (Visible on Mobile) -->
    <button class="navbar-toggle" @onclick="ToggleMenu">☰</button>

    <!-- Navigation Menu -->
    <ul class="navbar-menu" id="navMenu">
        <li>
            <NavLink href="/" Match="NavLinkMatch.All" class="nav-button">
                <i class="fas fa-home"></i> Home
            </NavLink>
        </li>
        <li>
            <NavLink href="/play" class="nav-button">
                <i class="fas fa-gamepad"></i> Play Game
            </NavLink>
        </li>
        <li>
            <NavLink href="/blog" class="nav-button">
                <i class="fas fa-book-open"></i> Blog
            </NavLink>
        </li>

        @if (_isAdmin)
        {
            <li>
                <NavLink href="/create-blog" class="nav-button">
                    <i class="fas fa-plus"></i> Create Blog
                </NavLink>
            </li>
        }

        @if (_isLoggedIn)
        {
            <li>
                <NavLink href="/my-account" class="nav-button">
                    <i class="fas fa-user"></i> My Profile: @_userName
                </NavLink>
            </li>
            <li>
                <button class="nav-button logout-button" @onclick="HandleLogout">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </li>
        }
        else
        {
            <li>
                <NavLink href="/login" class="nav-button">
                    <i class="fas fa-sign-in-alt"></i> Login
                </NavLink>
            </li>
        }

        <li>
            <a href="https://github.com/a3emond/maze-project" class="nav-button github-button" target="_blank" rel="noopener noreferrer">
                <i class="fab fa-github"></i> GitHub
            </a>
        </li>
    </ul>
</header>

@code {
    private bool _isLoggedIn;
    private bool _isAdmin;
    private string _userName = string.Empty;

    /// <summary>
    ///     Lifecycle method: Runs when the component initializes.
    ///     Subscribes to authentication state changes and updates the UI.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        AuthStateProvider.AuthenticationStateChanged += HandleAuthStateChanged;
        await UpdateAuthStateAsync();
    }

    /// <summary>
    ///     Updates the authentication state, checking if the user is logged in and if they are an admin.
    /// </summary>
    private async Task UpdateAuthStateAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        _isLoggedIn = user.Identity?.IsAuthenticated ?? false;
        _userName = _isLoggedIn ? user.Identity?.Name ?? "User" : string.Empty;

        _isAdmin = _isLoggedIn && user.Claims.Any(c => c.Type == ClaimTypes.Role && c.Value == "Admin");

        StateHasChanged();
    }

    /// <summary>
    ///     Handles authentication state changes and updates the UI accordingly.
    /// </summary>
    private async void HandleAuthStateChanged(Task<AuthenticationState> authStateTask)
    {
        await UpdateAuthStateAsync();
    }

    /// <summary>
    ///     Logs out the user by navigating to the logout page.
    /// </summary>
    private void HandleLogout()
    {
        NavManager.NavigateTo("/logout");
    }

    /// <summary>
    ///     Toggles the mobile navigation menu by invoking a JavaScript function.
    /// </summary>
    private async Task ToggleMenu()
    {
        await Js.InvokeVoidAsync("toggleNavbar");
    }

}