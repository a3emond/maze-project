@using MazeGameBlazor.Database.Models
@using MazeGameBlazor.Services
@inject BlogService BlogService
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

@code {

    // Parameters (Passed from Parent Component)
    [Parameter] public int Id { get; set; }
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string Content { get; set; } = string.Empty;
    [Parameter] public string Author { get; set; } = string.Empty;
    [Parameter] public DateTime CreatedAt { get; set; }
    [Parameter] public int LikeCount { get; set; }
    [Parameter] public MediaType MediaType { get; set; }
    [Parameter] public string MediaUrl { get; set; } = string.Empty;
    [Parameter] public string ThumbnailUrl { get; set; } = string.Empty;

    // Private State Variables
    private bool _isLiked = false;
    private List<Comment> _comments = new();
    private string _newComment = string.Empty;
    private string _commentAuthor = string.Empty;

    /// <summary>
    ///     Lifecycle method: Runs when the component is initialized.
    ///     Loads comments for the blog post.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadComments();
    }

    /// <summary>
    ///     Lifecycle method: Runs when parameters are set or updated.
    ///     Retrieves the authenticated user's name (if logged in).
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        _commentAuthor = user.Identity?.IsAuthenticated == true ? user.Identity.Name ?? "User" : "Guest";
    }

    /// <summary>
    ///     Fetches comments for the blog post.
    /// </summary>
    private async Task LoadComments()
    {
        _comments = await BlogService.GetCommentsAsync(Id);
    }

    /// <summary>
    ///     Submits a new comment to the blog post.
    /// </summary>
    private async Task SubmitComment()
    {
        if (!string.IsNullOrWhiteSpace(_newComment))
        {
            await BlogService.AddCommentAsync(Id, _commentAuthor, _newComment);
            _newComment = string.Empty; // Clear input after submission
            await LoadComments(); // Refresh comments
        }
    }

    /// <summary>
    ///     Likes the blog post if not already liked.
    /// </summary>
    private async Task LikePost()
    {
        if (!_isLiked)
        {
            _isLiked = true;
            LikeCount = await BlogService.LikePostAsync(Id);
        }
    }

}

<!-- Blog Post Card -->
<div class="blog-card">
    <!-- Media Preview -->
    @switch (MediaType)
    {
        case MediaType.Image:
            <img src="@MediaUrl" alt="@Title" class="blog-media"/>
            break;
        case MediaType.Video:
            <video controls class="blog-media">
                <source src="@($"api/media/stream/{Path.GetFileName(MediaUrl)}")" type="video/mp4"/>
                Your browser does not support the video tag.
            </video>
            break;
        case MediaType.Audio:
            <audio controls class="blog-media">
                <source src="@MediaUrl" type="audio/mpeg"/>
                Your browser does not support the audio tag.
            </audio>
            break;
        case MediaType.Document:
            <a href="@MediaUrl" class="blog-media document-link" target="_blank">View Document</a>
            break;
        default:
            <p class="blog-media">Unsupported media type.</p>
            break;
    }

    <!-- Blog Content -->
    <div class="blog-content">
        <h3>@Title</h3>
        <p class="blog-meta">By @Author | @CreatedAt.ToString("MMMM dd, yyyy")</p>
        <p>@Content</p>

        <!-- Like Button -->
        <button @onclick="LikePost" class="like-button">
            ❤️ <strong>@LikeCount</strong>
        </button>
    </div>

    <!-- Comment Section -->
    <div class="comment-section">
        <h4>Comments</h4>

        <!-- Display Comments -->
        <div class="comments">
            @foreach (var comment in _comments)
            {
                <div class="comment">
                    <strong>@comment.Author</strong>: @comment.Content
                </div>
            }
        </div>

        <!-- Add New Comment -->
        <div class="add-comment">
            <input type="text" @bind="_newComment" placeholder="Write a comment..."/>
            <button @onclick="SubmitComment" class="comment-button">Comment</button>
        </div>
    </div>
</div>