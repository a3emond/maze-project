@page "/play"
@rendermode InteractiveWebAssembly

@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject MazeGameManager GameManager
@inject GameState GameState

@using MazeGameBlazor.Shared.GameEngine.Models
@using MazeGameBlazor.Client.Components.Audio;
@implements IAsyncDisposable

<PageTitle>Play the Maze Game</PageTitle>

<div class="game-container">
    <MazeAlgorithmSelector Value="GameState.SelectedAlgorithm"
                           OnChange="GameManager.OnAlgorithmChangeAsync" />

    <BackgroundMusicPlayer />
    <MazeControls OnStart="@StartGame" OnRestart="@RestartGame" />


    <MazeRenderer MaxHearts="@GameState.MaxHearts"
                  CurrentHearts="@GameState.CurrentHearts"
                  InventorySlots="@GameState.InventorySlots"
                  Timer="@GameState.Timer"
                  StatusEffect="@GameState.StatusEffect"
                  OnFocus="GameManager.FocusGameScreenAsync" />
</div>

@code {
    private DotNetObjectReference<Game>? _dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        GameManager.NotifyUi = () =>
        {
            StateHasChanged();
            return Task.CompletedTask;
        };

        await GameManager.InitializeAsync();

        _dotNetRef = DotNetObjectReference.Create(this);

        // Register key listeners AND auto-focus logic
        await Js.InvokeVoidAsync("registerKeyListeners", _dotNetRef);
        await Js.InvokeVoidAsync("autoFocusGame"); 
    }

    private async Task StartGame() => await GameManager.StartGameAsync();
    private void RestartGame() => GameManager.RestartGame();

    [JSInvokable] public Task HandleKeyPress(string key) => GameManager.HandleKeyPressAsync(key);
    [JSInvokable] public void HandleKeyRelease(string key) => GameManager.HandleKeyRelease(key);

    public ValueTask DisposeAsync()
    {
        _dotNetRef?.Dispose();
        return ValueTask.CompletedTask;
    }
}
